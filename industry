# Industry Impact Statistical Significance Test with Seasonality Control
print("\n6. INDUSTRY IMPACT STATISTICAL SIGNIFICANCE TEST")
print("-" * 60)

# 1. Chi-square test for industry distribution change
def test_industry_significance(df, event_date):
    """Test if industry distribution changed significantly"""
    pre_data = df[df['Date'] < event_date]
    post_data = df[df['Date'] >= event_date]
    
    # Create contingency table for chi-square test
    pre_industry_counts = pre_data.groupby('Customer_Industry')['Amount'].count()
    post_industry_counts = post_data.groupby('Customer_Industry')['Amount'].count()
    
    # Align industries
    all_industries = list(set(pre_industry_counts.index) | set(post_industry_counts.index))
    pre_counts = [pre_industry_counts.get(ind, 0) for ind in all_industries]
    post_counts = [post_industry_counts.get(ind, 0) for ind in all_industries]
    
    # Chi-square test
    chi2, p_value = stats.chisquare(post_counts, pre_counts)
    
    return chi2, p_value, all_industries

# 2. Industry-specific tests with seasonality control
def test_industry_with_seasonality(df, industry, event_2024, event_2025, window=30):
    """Test specific industry with 2024 vs 2025 comparison"""
    
    # Get 2024 data
    pre_2024 = df[(df['Date'] >= event_2024 - timedelta(days=window)) & 
                  (df['Date'] < event_2024) & 
                  (df['Customer_Industry'] == industry)]
    post_2024 = df[(df['Date'] >= event_2024) & 
                   (df['Date'] <= event_2024 + timedelta(days=window)) & 
                   (df['Customer_Industry'] == industry)]
    
    # Get 2025 data
    pre_2025 = df[(df['Date'] >= event_2025 - timedelta(days=window)) & 
                  (df['Date'] < event_2025) & 
                  (df['Customer_Industry'] == industry)]
    post_2025 = df[(df['Date'] >= event_2025) & 
                   (df['Date'] <= event_2025 + timedelta(days=window)) & 
                   (df['Customer_Industry'] == industry)]
    
    # Calculate changes
    if len(pre_2024) > 0 and len(post_2024) > 0:
        change_2024 = (post_2024['Amount'].sum() - pre_2024['Amount'].sum()) / abs(pre_2024['Amount'].sum()) * 100
    else:
        change_2024 = 0
        
    if len(pre_2025) > 0 and len(post_2025) > 0:
        change_2025 = (post_2025['Amount'].sum() - pre_2025['Amount'].sum()) / abs(pre_2025['Amount'].sum()) * 100
    else:
        change_2025 = 0
    
    # Difference-in-differences
    diff_in_diff = change_2025 - change_2024
    
    # Bootstrap test for significance
    if len(pre_2024) > 10 and len(post_2024) > 10 and len(pre_2025) > 10 and len(post_2025) > 10:
        # Combine all data
        all_2024 = pd.concat([pre_2024, post_2024])
        all_2025 = pd.concat([pre_2025, post_2025])
        
        # Bootstrap
        n_bootstrap = 1000
        bootstrap_diffs = []
        
        for _ in range(n_bootstrap):
            # Resample
            sample_2024 = all_2024.sample(n=len(all_2024), replace=True)
            sample_2025 = all_2025.sample(n=len(all_2025), replace=True)
            
            # Split into pre/post
            pre_sample_2024 = sample_2024.iloc[:len(pre_2024)]
            post_sample_2024 = sample_2024.iloc[len(pre_2024):]
            pre_sample_2025 = sample_2025.iloc[:len(pre_2025)]
            post_sample_2025 = sample_2025.iloc[len(pre_2025):]
            
            # Calculate bootstrap diff-in-diff
            if len(pre_sample_2024) > 0 and len(pre_sample_2025) > 0:
                boot_change_2024 = (post_sample_2024['Amount'].sum() - pre_sample_2024['Amount'].sum()) / abs(pre_sample_2024['Amount'].sum()) * 100
                boot_change_2025 = (post_sample_2025['Amount'].sum() - pre_sample_2025['Amount'].sum()) / abs(pre_sample_2025['Amount'].sum()) * 100
                bootstrap_diffs.append(boot_change_2025 - boot_change_2024)
        
        # Calculate p-value
        bootstrap_diffs = np.array(bootstrap_diffs)
        p_value = np.sum(np.abs(bootstrap_diffs) >= np.abs(diff_in_diff)) / n_bootstrap
        
        return diff_in_diff, p_value, True
    else:
        return diff_in_diff, None, False

# Test overall industry distribution
chi2, p_value, industries = test_industry_significance(df, apr_event)
print(f"\nOverall Industry Distribution Change:")
print(f"Chi-square statistic: {chi2:.3f}")
print(f"P-value: {p_value:.4f}")
print(f"Significant: {'YES' if p_value < 0.05 else 'NO'}")

# Test each significant industry with seasonality control
event_2024 = pd.Timestamp('2024-04-02')
event_2025 = pd.Timestamp('2025-04-02')

print("\n" + "="*60)
print("INDUSTRY-SPECIFIC TESTS WITH SEASONALITY CONTROL")
print("="*60)

# Get industries with significant changes
significant_results = []

for industry in significant_industries.index[:20]:  # Test top 20
    diff_in_diff, p_val, tested = test_industry_with_seasonality(
        df, industry, event_2024, event_2025
    )
    
    if tested and p_val is not None:
        significant_results.append({
            'Industry': industry,
            'Diff_in_Diff': diff_in_diff,
            'P_value': p_val,
            'Significant': p_val < 0.05,
            'Customer_Count': significant_industries.loc[industry, 'Customer_Count']
        })

# Convert to DataFrame and sort
results_df = pd.DataFrame(significant_results)
results_df = results_df.sort_values('P_value')

print("\nIndustries with Statistically Significant Changes (p < 0.05):")
print("-" * 60)
sig_industries = results_df[results_df['Significant']]
if len(sig_industries) > 0:
    for _, row in sig_industries.iterrows():
        print(f"{row['Industry']}:")
        print(f"  Diff-in-Diff: {row['Diff_in_Diff']:.1f}%")
        print(f"  P-value: {row['P_value']:.4f}")
        print(f"  Customers: {row['Customer_Count']}")
        print()
else:
    print("NO INDUSTRIES SHOWED STATISTICALLY SIGNIFICANT CHANGES AFTER CONTROLLING FOR SEASONALITY")

print("\nTop 10 Industries by P-value:")
print(results_df[['Industry', 'Diff_in_Diff', 'P_value', 'Significant']].head(10))

# Create visualization
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))

# Plot 1: P-values by industry
industries_to_plot = results_df.head(15)
y_pos = np.arange(len(industries_to_plot))

colors = ['red' if p < 0.05 else 'gray' for p in industries_to_plot['P_value']]
bars = ax1.barh(y_pos, industries_to_plot['P_value'], color=colors, alpha=0.7)

ax1.axvline(x=0.05, color='red', linestyle='--', label='Significance threshold')
ax1.set_yticks(y_pos)
ax1.set_yticklabels(industries_to_plot['Industry'])
ax1.set_xlabel('P-value')
ax1.set_title('Statistical Significance of Industry Changes (with Seasonality Control)')
ax1.legend()
ax1.set_xlim(0, 1)

# Plot 2: Effect sizes for significant industries
if len(sig_industries) > 0:
    sig_y_pos = np.arange(len(sig_industries))
    colors = ['green' if d > 0 else 'red' for d in sig_industries['Diff_in_Diff']]
    
    ax2.barh(sig_y_pos, sig_industries['Diff_in_Diff'], color=colors, alpha=0.7)
    ax2.set_yticks(sig_y_pos)
    ax2.set_yticklabels(sig_industries['Industry'])
    ax2.set_xlabel('Difference-in-Differences (%)')
    ax2.set_title('Effect Size for Statistically Significant Industries')
    ax2.axvline(x=0, color='black', linestyle='-', alpha=0.3)
else:
    ax2.text(0.5, 0.5, 'No Statistically Significant Industries Found', 
             ha='center', va='center', transform=ax2.transAxes, fontsize=16)
    ax2.set_xticks([])
    ax2.set_yticks([])

plt.tight_layout()
plt.savefig('industry_statistical_significance.png', dpi=300, bbox_inches='tight')
plt.close()

# Summary
print("\n" + "="*60)
print("SUMMARY OF INDUSTRY IMPACT SIGNIFICANCE")
print("="*60)
print(f"Total industries tested: {len(results_df)}")
print(f"Statistically significant (p<0.05): {len(sig_industries)}")
print(f"Percentage significant: {len(sig_industries)/len(results_df)*100:.1f}%")

if len(sig_industries) > 0:
    print(f"\nMost significant industry: {sig_industries.iloc[0]['Industry']}")
    print(f"  Effect size: {sig_industries.iloc[0]['Diff_in_Diff']:.1f}%")
    print(f"  P-value: {sig_industries.iloc[0]['P_value']:.4f}")


=============ㅌㅌㅌㅌ===========

# 5. Industry Impact Analysis with Enhanced Visualizations
print("\n5. INDUSTRY IMPACT ANALYSIS")
print("-" * 40)

# Calculate industry impact
industry_customers = df.groupby('Customer_Industry')['Customer_Name'].nunique()
industry_impact = df[df['Period'].isin(['Pre-April', 'Post-April'])].groupby(['Customer_Industry', 'Period'])['Amount'].sum().unstack(fill_value=0)

# Add customer count
industry_impact['Customer_Count'] = industry_customers
industry_impact['Change_%'] = 0  # Initialize

# Calculate change only if both periods exist
if 'Pre-April' in industry_impact.columns and 'Post-April' in industry_impact.columns:
    mask = industry_impact['Pre-April'] != 0
    industry_impact.loc[mask, 'Change_%'] = (
        (industry_impact.loc[mask, 'Post-April'] - industry_impact.loc[mask, 'Pre-April']) / 
        industry_impact.loc[mask, 'Pre-April'].abs() * 100
    ).round(2)

# Filter industries with at least 10 customers
significant_industries = industry_impact[industry_impact['Customer_Count'] >= 10]
industry_ranking = significant_industries.sort_values('Change_%', ascending=False)

# Create comprehensive industry impact visualization
fig = plt.figure(figsize=(20, 12))
gs = fig.add_gridspec(3, 2, height_ratios=[2, 1.5, 1], hspace=0.3, wspace=0.3)

# 1. Main Industry Impact Bar Chart (Top)
ax1 = fig.add_subplot(gs[0, :])

# Get top 10 increasers and decreasers
top_increasers = industry_ranking.head(10)
top_decreasers = industry_ranking.tail(10)
combined_industries = pd.concat([top_increasers, top_decreasers])

# Create color map
colors = []
for val in combined_industries['Change_%']:
    if val > 50:
        colors.append('#2E7D32')  # Dark green
    elif val > 0:
        colors.append('#66BB6A')  # Light green
    elif val > -50:
        colors.append('#EF5350')  # Light red
    else:
        colors.append('#C62828')  # Dark red

# Create horizontal bar chart
y_pos = np.arange(len(combined_industries))
bars = ax1.barh(y_pos, combined_industries['Change_%'], color=colors, alpha=0.8)

# Add value labels
for i, (bar, count) in enumerate(zip(bars, combined_industries['Customer_Count'])):
    width = bar.get_width()
    label_x_pos = width + 5 if width > 0 else width - 5
    ax1.text(label_x_pos, bar.get_y() + bar.get_height()/2, 
             f'{width:.1f}%', ha='left' if width > 0 else 'right', 
             va='center', fontsize=10, fontweight='bold')
    # Add customer count
    ax1.text(5 if width > 0 else -5, bar.get_y() + bar.get_height()/2, 
             f'({count} customers)', ha='left' if width > 0 else 'right', 
             va='center', fontsize=8, alpha=0.7)

ax1.set_yticks(y_pos)
ax1.set_yticklabels(combined_industries.index, fontsize=11)
ax1.set_xlabel('Percentage Change (%)', fontsize=12, fontweight='bold')
ax1.set_title('Industry Impact: Top Winners and Losers', fontsize=16, fontweight='bold', pad=20)
ax1.axvline(x=0, color='black', linestyle='-', alpha=0.3, linewidth=1)
ax1.grid(True, axis='x', alpha=0.3)
ax1.set_xlim(-500, 200)

# Add background shading
ax1.axvspan(-500, 0, alpha=0.05, color='red')
ax1.axvspan(0, 200, alpha=0.05, color='green')

# 2. Industry Volume Comparison (Bottom Left)
ax2 = fig.add_subplot(gs[1, 0])

# Select top 10 by total volume
top_volume_industries = industry_impact.nlargest(10, 'Customer_Count')
x = np.arange(len(top_volume_industries))
width = 0.35

pre_volumes = top_volume_industries['Pre-April'] / 1e6
post_volumes = top_volume_industries['Post-April'] / 1e6

bars1 = ax2.bar(x - width/2, pre_volumes, width, label='Pre-April', color='#90CAF9', alpha=0.8)
bars2 = ax2.bar(x + width/2, post_volumes, width, label='Post-April', color='#1976D2', alpha=0.8)

ax2.set_xlabel('Industry', fontsize=11, fontweight='bold')
ax2.set_ylabel('Trading Volume (Million $)', fontsize=11, fontweight='bold')
ax2.set_title('Trading Volume by Industry', fontsize=13, fontweight='bold')
ax2.set_xticks(x)
ax2.set_xticklabels(top_volume_industries.index, rotation=45, ha='right')
ax2.legend()
ax2.grid(True, axis='y', alpha=0.3)

# Add value labels on bars
def autolabel(ax, bars):
    for bar in bars:
        height = bar.get_height()
        if height > 0:
            ax.annotate(f'{height:.0f}',
                       xy=(bar.get_x() + bar.get_width() / 2, height),
                       xytext=(0, 3),
                       textcoords="offset points",
                       ha='center', va='bottom', fontsize=8)

autolabel(ax2, bars1)
autolabel(ax2, bars2)

# 3. Impact Distribution (Bottom Right)
ax3 = fig.add_subplot(gs[1, 1])

# Create histogram of changes
change_data = industry_ranking['Change_%'].values
bins = [-500, -200, -100, -50, 0, 50, 100, 200]
counts, _ = np.histogram(change_data, bins=bins)

colors_hist = ['#C62828', '#EF5350', '#FFCDD2', '#C8E6C9', '#66BB6A', '#2E7D32']
ax3.bar(range(len(counts)), counts, color=colors_hist[:len(counts)], alpha=0.8)
ax3.set_xticks(range(len(counts)))
ax3.set_xticklabels([f'{bins[i]} to {bins[i+1]}%' for i in range(len(counts))], rotation=45, ha='right')
ax3.set_ylabel('Number of Industries', fontsize=11, fontweight='bold')
ax3.set_title('Distribution of Industry Changes', fontsize=13, fontweight='bold')
ax3.grid(True, axis='y', alpha=0.3)

# Add count labels
for i, count in enumerate(counts):
    if count > 0:
        ax3.text(i, count + 0.1, str(count), ha='center', va='bottom', fontsize=10, fontweight='bold')

# 4. Summary Statistics Box (Bottom)
ax4 = fig.add_subplot(gs[2, :])
ax4.axis('off')

# Calculate summary statistics
total_industries = len(significant_industries)
positive_change = len(significant_industries[significant_industries['Change_%'] > 0])
negative_change = len(significant_industries[significant_industries['Change_%'] < 0])
avg_change = significant_industries['Change_%'].mean()
median_change = significant_industries['Change_%'].median()

# Create summary text
summary_text = f"""
Summary Statistics (Industries with 10+ customers):
- Total Industries Analyzed: {total_industries}
- Industries with Positive Change: {positive_change} ({positive_change/total_industries*100:.1f}%)
- Industries with Negative Change: {negative_change} ({negative_change/total_industries*100:.1f}%)
- Average Change: {avg_change:.1f}%
- Median Change: {median_change:.1f}%
- Largest Increase: {industry_ranking.iloc[0]['Change_%']:.1f}% ({industry_ranking.index[0]})
- Largest Decrease: {industry_ranking.iloc[-1]['Change_%']:.1f}% ({industry_ranking.index[-1]})
"""

ax4.text(0.5, 0.5, summary_text, transform=ax4.transAxes, 
         fontsize=12, verticalalignment='center', horizontalalignment='center',
         bbox=dict(boxstyle='round,pad=0.5', facecolor='lightgray', alpha=0.2))

plt.suptitle('Industry Impact Analysis - April 2, 2025 Tariff Event', fontsize=18, fontweight='bold', y=0.98)
plt.savefig('april_industry_impact_comprehensive.png', dpi=300, bbox_inches='tight')
plt.close()

# Create a simple heatmap for top industries
fig, ax = plt.subplots(figsize=(12, 8))

# Get top 15 industries by absolute change
top_impact_industries = industry_ranking.reindex(
    industry_ranking['Change_%'].abs().nlargest(15).index
).sort_values('Change_%', ascending=True)

# Create color gradient
colors = plt.cm.RdYlGn(np.linspace(0, 1, len(top_impact_industries)))
change_normalized = (top_impact_industries['Change_%'] - top_impact_industries['Change_%'].min()) / \
                   (top_impact_industries['Change_%'].max() - top_impact_industries['Change_%'].min())

bars = ax.barh(range(len(top_impact_industries)), top_impact_industries['Change_%'], 
               color=plt.cm.RdYlGn(change_normalized))

# Add value labels
for i, (idx, row) in enumerate(top_impact_industries.iterrows()):
    change = row['Change_%']
    customers = row['Customer_Count']
    
    # Change percentage label
    label_x = change + 10 if change > 0 else change - 10
    ax.text(label_x, i, f'{change:.1f}%', 
            ha='left' if change > 0 else 'right', va='center', 
            fontsize=11, fontweight='bold')
    
    # Customer count label
    ax.text(5 if change > 0 else -5, i, f'{customers} customers', 
            ha='left' if change > 0 else 'right', va='center', 
            fontsize=9, alpha=0.7, style='italic')

ax.set_yticks(range(len(top_impact_industries)))
ax.set_yticklabels(top_impact_industries.index, fontsize=11)
ax.set_xlabel('Percentage Change (%)', fontsize=12, fontweight='bold')
ax.set_title('Top 15 Industries by Impact Magnitude', fontsize=16, fontweight='bold', pad=20)
ax.axvline(x=0, color='black', linestyle='-', alpha=0.5, linewidth=2)
ax.grid(True, axis='x', alpha=0.3)

# Add gradient legend
sm = plt.cm.ScalarMappable(cmap=plt.cm.RdYlGn, 
                           norm=plt.Normalize(vmin=top_impact_industries['Change_%'].min(), 
                                            vmax=top_impact_industries['Change_%'].max()))
sm.set_array([])
cbar = plt.colorbar(sm, ax=ax, orientation='horizontal', pad=0.05, shrink=0.5)
cbar.set_label('Impact Scale', fontsize=10)

plt.tight_layout()
plt.savefig('april_industry_heatmap.png', dpi=300, bbox_inches='tight')
plt.close()

# Print results
print("\nIndustry Impact Ranking (Industries with 10+ customers):")
print("\nTop 10 Increasers:")
print(industry_ranking[['Change_%', 'Customer_Count']].head(10))
print("\nTop 10 Decreasers:")
print(industry_ranking[['Change_%', 'Customer_Count']].tail(10))

print("\nVisualization files created:")
print("- april_industry_impact_comprehensive.png (Full analysis)")
print("- april_industry_heatmap.png (Top 15 impact visualization)")
